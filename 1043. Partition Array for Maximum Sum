// Code write on Leetcode 
class Solution {
public:

// Recursion
int solve(int index , vector<int>arr,int k){
  if(index>=arr.size()) return 0;
  int max_val=0;
  int res=0;
  for(int j=index;j<arr.size() && (j-index+1)<=k;j++){
    max_val= max(max_val,arr[j]);
    res = max(res , ((j-index+1)*max_val)+solve(j+1,arr,k)); 
  }
  return res;
}



// Top-Down approach
  int solveMem(int index,vector<int>arr,int k,vector<int>&dp){
      if(index>=arr.size()) return 0;
      if(dp[index]!=-1) return dp[index];
  int max_val=0;
  int res=0;
  for(int j=index;j<arr.size() && (j-index+1)<=k;j++){
    max_val= max(max_val,arr[j]);
    res = max(res , ((j-index+1)*max_val)+solveMem(j+1,arr,k,dp)); 
  }
  return dp[index]=res;
  }



// Bottom-Up approach
int solveTab(vector<int>arr,int k){
   vector<int>dp(arr.size()+1,0);
  for(int index=arr.size()-1;index>=0;index--){
      int max_val=0;
  int res=0;
  for(int j=index;j<arr.size() && (j-index+1)<=k;j++){
    max_val= max(max_val,arr[j]);
    res = max(res , ((j-index+1)*max_val)+dp[j+1]); 
  }
  dp[index]=res;
  }
  return dp[0];
}


    int maxSumAfterPartitioning(vector<int>& arr, int k) {
       //int ans = solve(0,arr,k); // For Recursion
       //vector<int>dp(arr.size(),-1); // For Top-Down
       //int ansMem=solveMem(0,arr,k,dp); // Top-down
        int ans=solveTab(arr,k); // For Bottom Up 
       return ans;
    }
};
